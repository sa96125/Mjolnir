
datasource db {
  provider = "mysql"
  url      = env("VITE_DATABASE_URL")
  referentialIntegrity = "prisma"
}

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}


model User {
  id             String          @id @default(uuid())
  name           String?
  email          String          @unique
  password       String
  isAdmin        Boolean?
  role           Role            @default(BASIC)
  writtenPosts   Post[]          @relation("WrittenPosts")
  favoritePosts  Post[]          @relation("FavoritePosts")
  userPreference UserPreference?
  comment        Comment?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt

  @@index([email])
}

model UserPreference {
  id           String  @id @default(uuid())
  emailUpdates Boolean
  user         User?   @relation(fields: [userId], references: [id])
  userId       String? @unique
}

model Post {
  id            String   @id @default(uuid())
  title         String
  rating        Float
  author        User?    @relation("WrittenPosts", fields: [authorId], references: [id])
  authorId      String?
  favoritedBy   User?    @relation("FavoritePosts", fields: [favoritedById], references: [id])
  favoritedById String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Celebrity {
  id              String           @id @default(uuid())
  name            String?
  thumbnail       String?
  title           String
  description     String
  likes           Int              @default(0)
  platforms       Platform[]
  tags            Tag[]
  celebPreference CelebPreference?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
}

model CelebPreference {
  id          String    @id @default(uuid())
  link        String
  comments    Comment[]
  celebrity   Celebrity @relation(fields: [celebrityId], references: [id])
  celebrityId String    @unique
}

model Comment {
  id                String           @id @default(uuid())
  CelebPreference   CelebPreference? @relation(fields: [celebPreferenceId], references: [id])
  celebPreferenceId String?
  user              User             @relation(fields: [userId], references: [id])
  userId            String           @unique
}

model Tag {
  id          String      @id @default(uuid())
  name        String      @unique
  celebrities Celebrity[]
}

model Platform {
  id          String      @id @default(uuid())
  name        String      @unique
  celebrities Celebrity[]
}

enum Role {
  BASIC
  EXPERT
  ADMIN
}
